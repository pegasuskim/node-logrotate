#!/usr/bin/env node
'use strict';
var cluster = require('cluster');
var app = require('../app');
var http = require('http');
var common = require('../common');
var filelog = require('../utils/filelog.js');

if (cluster.isMaster) {
    require('os').cpus().forEach(function() {
        cluster.fork();
    });

    // logrotate 적용 시 Listen for the signal
    // http://nompute.com/posts/2013/07/27/nodejs_cluster_and_logrotate/ 참조 할것
    process.on('SIGUSR2', function() {
      // Reload the logger configuration wholesale
      common.log.info("Log files reloaded.");
    });

    // file log
    common.filelog.log('cluster Master Set', true);
    cluster.on('online', function(worker) {
        // winston log
        common.log.info('worker ' + worker.process.pid + ' is being executed.');
        // file log
        common.filelog.log('worker :' + worker.process.pid + ' is being executed.', true);
    });

    cluster.on('exit', function(worker, code, signal) {
        var exitCode = worker.process.exitCode;
        common.log.debug('worker ' + worker.process.pid + ' died ('+exitCode+'). restarting...');
        common.filelog.debug('worker : ' + worker.process.pid + ' died ('+exitCode+'). restarting...', true)
    });

  }else{
      var port = normalizePort(process.env.PORT || '3000');
      app.set('port', port);

      var server = http.createServer(app);
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
}


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      common.log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      common.log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  common.log.info('Listening on ' + bind);
}
